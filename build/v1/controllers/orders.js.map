{"version":3,"sources":["../../../api/v1/controllers/orders.js"],"names":["getAllOrders","req","res","status","json","allOrders","getOrderById","orderId","params","send","errors","order","find","item","id","placeOrder","Order","body","push","updateOrderStatus","orderStatus","index","findIndex","splice"],"mappings":";;;;;;;AAAA;;AAGA;;AAEO,IAAMA,sCAAe,SAAfA,YAAe,CAACC,GAAD,EAAMC,GAAN,EAAc;AACxCA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,gBAArB;AACD,CAFM;;AAHP;AAOO,IAAMC,sCAAe,SAAfA,YAAe,CAACL,GAAD,EAAMC,GAAN,EAAc;AACxC,MAAMK,UAAU,sBAAMN,IAAIO,MAAJ,CAAWD,OAAjB,CAAhB;AACA,MAAI,CAACA,OAAL,EAAc;AACZL,QAAIC,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB,EAAEC,QAAQ,EAAEH,SAAS,sBAAX,EAAV,EAArB;AACD;;AAED,MAAMI,QAAQN,iBAAUO,IAAV,CAAe;AAAA,WAAQC,KAAKC,EAAL,KAAYP,OAApB;AAAA,GAAf,CAAd;AACAL,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,KAArB;AACD,CARM;;AAUA,IAAMI,kCAAa,SAAbA,UAAa,CAACd,GAAD,EAAMC,GAAN,EAAc;AACtC,MAAMS,QAAQ,IAAIK,YAAJ,CAAUf,IAAIgB,IAAd,CAAd;AACAZ,mBAAUa,IAAV,CAAeP,KAAf;;AAEAT,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,gBAArB;AACD,CALM;;AAOA,IAAMc,gDAAoB,SAApBA,iBAAoB,CAAClB,GAAD,EAAMC,GAAN,EAAc;AAAA,MACrCK,OADqC,GACzBN,IAAIO,MADqB,CACrCD,OADqC;AAAA,MAErCJ,MAFqC,GAE1BF,IAAIgB,IAFsB,CAErCd,MAFqC;;;AAI7C,MAAMW,KAAK,sBAAMP,OAAN,CAAX;AACA,MAAI,CAACO,EAAL,EAAS;AACP,WAAOZ,IAAIC,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB,EAAEC,QAAQ,EAAEH,SAAS,sBAAX,EAAV,EAArB,CAAP;AACD;AACD,MAAI,CAACJ,MAAL,EAAa;AACX,WAAOD,IAAIC,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB,EAAEC,QAAQ,EAAEP,QAAQ,0BAAV,EAAV,EAArB,CAAP;AACD;;AAGD,MAAMQ,QAAQN,iBAAUO,IAAV,CAAe;AAAA,WAAQ,sBAAMC,KAAKC,EAAX,MAAmBA,EAA3B;AAAA,GAAf,CAAd;;AAEAH,QAAMS,WAAN,GAAoBjB,MAApB;AACA,MAAMkB,QAAQhB,iBAAUiB,SAAV,CAAoB;AAAA,WAAQ,sBAAMT,KAAKC,EAAX,MAAmBH,MAAMG,EAAjC;AAAA,GAApB,CAAd;AACAT,mBAAUkB,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB,EAA2BV,KAA3B;;AAEAT,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,KAArB;AACD,CApBM","file":"orders.js","sourcesContent":["import { toInt } from '../helpers/functions';\r\n\r\n// Import data structure for orders\r\nimport { allOrders, Order } from '../models/Order';\r\n\r\nexport const getAllOrders = (req, res) => {\r\n  res.status(200).json(allOrders);\r\n};\r\n\r\nexport const getOrderById = (req, res) => {\r\n  const orderId = toInt(req.params.orderId);\r\n  if (!orderId) {\r\n    res.status(422).send({ errors: { orderId: 'Order Id is required' } });\r\n  }\r\n\r\n  const order = allOrders.find(item => item.id === orderId);\r\n  res.status(200).json(order);\r\n};\r\n\r\nexport const placeOrder = (req, res) => {\r\n  const order = new Order(req.body);\r\n  allOrders.push(order);\r\n\r\n  res.status(200).json(allOrders);\r\n};\r\n\r\nexport const updateOrderStatus = (req, res) => {\r\n  const { orderId } = req.params;\r\n  const { status } = req.body;\r\n\r\n  const id = toInt(orderId);\r\n  if (!id) {\r\n    return res.status(422).send({ errors: { orderId: 'Order Id is required' } });\r\n  }\r\n  if (!status) {\r\n    return res.status(422).send({ errors: { status: 'Order status is required' } });\r\n  }\r\n  \r\n  \r\n  const order = allOrders.find(item => toInt(item.id) === id);\r\n  \r\n  order.orderStatus = status;\r\n  const index = allOrders.findIndex(item => toInt(item.id) === order.id);\r\n  allOrders.splice(index, 1, order);\r\n\r\n  res.status(201).json(order);\r\n};\r\n"]}