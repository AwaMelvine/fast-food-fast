{"version":3,"sources":["../../../api/v1/controllers/foodItems.js"],"names":["getAllFoodItems","req","res","status","json","allFoodItems","getFoodItemById","foodItemId","params","send","errors","foodItem","find","item","id","createFoodItem","FoodItem","body","push","updateFoodItem","previousFoodItem","updatedFoodItem","Object","assign","index","findIndex","updatedFoodItems","splice","deleteFoodItem"],"mappings":";;;;;;;AAAA;;AAGA;;AAEO,IAAMA,4CAAkB,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC3CA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,sBAArB;AACD,CAFM;;AAHP;AAOO,IAAMC,4CAAkB,SAAlBA,eAAkB,CAACL,GAAD,EAAMC,GAAN,EAAc;AAC3C,MAAMK,aAAa,sBAAMN,IAAIO,MAAJ,CAAWD,UAAjB,CAAnB;AACA,MAAI,CAACA,UAAL,EAAiB;AACfL,QAAIC,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB,EAAEC,QAAQ,EAAEH,YAAY,0BAAd,EAAV,EAArB;AACD;;AAED,MAAMI,WAAWN,uBAAaO,IAAb,CAAkB;AAAA,WAAQC,KAAKC,EAAL,KAAYP,UAApB;AAAA,GAAlB,CAAjB;AACAL,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,QAArB;AACD,CARM;;AAUA,IAAMI,0CAAiB,SAAjBA,cAAiB,CAACd,GAAD,EAAMC,GAAN,EAAc;AAC1C,MAAMS,WAAW,IAAIK,kBAAJ,CAAaf,IAAIgB,IAAjB,CAAjB;AACAZ,yBAAaa,IAAb,CAAkBP,QAAlB;;AAEAT,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,sBAArB;AACD,CALM;;AAOA,IAAMc,0CAAiB,SAAjBA,cAAiB,CAAClB,GAAD,EAAMC,GAAN,EAAc;AAC1C,MAAMK,aAAa,sBAAMN,IAAIO,MAAJ,CAAWD,UAAjB,CAAnB;AACA,MAAI,CAACA,UAAL,EAAiB;AACfL,QAAIC,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB,EAAEC,QAAQ,EAAEH,YAAY,0BAAd,EAAV,EAArB;AACD;;AAED,MAAMa,mBAAmBf,uBAAaO,IAAb,CAAkB;AAAA,WAAQ,sBAAMC,KAAKC,EAAX,MAAmBP,UAA3B;AAAA,GAAlB,CAAzB;AACA,MAAMc,kBAAkBC,OAAOC,MAAP,CAAcH,gBAAd,EAAgCnB,IAAIgB,IAApC,CAAxB;;AAEA,MAAMO,QAAQnB,uBAAaoB,SAAb,CAAuB;AAAA,WAAQ,sBAAMZ,KAAKC,EAAX,MAAmBM,iBAAiBN,EAA5C;AAAA,GAAvB,CAAd;AACA,MAAMY,mBAAmBrB,uBAAasB,MAAb,CAAoBH,KAApB,EAA2B,CAA3B,EAA8BH,eAA9B,CAAzB;;AAGAC,SAAOC,MAAP,CAAclB,sBAAd,EAA4BqB,gBAA5B;AACAxB,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBiB,eAArB;AACD,CAfM;;AAkBA,IAAMO,0CAAiB,SAAjBA,cAAiB,CAAC3B,GAAD,EAAMC,GAAN,EAAc;AAC1C,MAAMK,aAAa,sBAAMN,IAAIO,MAAJ,CAAWD,UAAjB,CAAnB;AACA,MAAMiB,QAAQnB,uBAAaoB,SAAb,CAAuB;AAAA,WAAQ,sBAAMZ,KAAKC,EAAX,MAAmBP,UAA3B;AAAA,GAAvB,CAAd;;AAEAF,yBAAasB,MAAb,CAAoBH,KAApB,EAA2B,CAA3B;AACAtB,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,sBAArB;AACD,CANM","file":"foodItems.js","sourcesContent":["import { toInt } from '../helpers/functions';\r\n\r\n// Import data structure for food items\r\nimport { allFoodItems, FoodItem } from '../models/FoodItem';\r\n\r\nexport const getAllFoodItems = (req, res) => {\r\n  res.status(200).json(allFoodItems);\r\n};\r\n\r\nexport const getFoodItemById = (req, res) => {\r\n  const foodItemId = toInt(req.params.foodItemId);\r\n  if (!foodItemId) {\r\n    res.status(422).send({ errors: { foodItemId: 'Food Item Id is required' } });\r\n  }\r\n\r\n  const foodItem = allFoodItems.find(item => item.id === foodItemId);\r\n  res.status(200).json(foodItem);\r\n};\r\n\r\nexport const createFoodItem = (req, res) => {\r\n  const foodItem = new FoodItem(req.body);\r\n  allFoodItems.push(foodItem);\r\n\r\n  res.status(200).json(allFoodItems);\r\n};\r\n\r\nexport const updateFoodItem = (req, res) => {\r\n  const foodItemId = toInt(req.params.foodItemId);\r\n  if (!foodItemId) {\r\n    res.status(422).send({ errors: { foodItemId: 'Food Item Id is required' } });\r\n  }\r\n\r\n  const previousFoodItem = allFoodItems.find(item => toInt(item.id) === foodItemId);\r\n  const updatedFoodItem = Object.assign(previousFoodItem, req.body);\r\n\r\n  const index = allFoodItems.findIndex(item => toInt(item.id) === previousFoodItem.id);\r\n  const updatedFoodItems = allFoodItems.splice(index, 1, updatedFoodItem);\r\n\r\n\r\n  Object.assign(allFoodItems, updatedFoodItems);\r\n  res.status(201).json(updatedFoodItem);\r\n};\r\n\r\n\r\nexport const deleteFoodItem = (req, res) => {\r\n  const foodItemId = toInt(req.params.foodItemId);\r\n  const index = allFoodItems.findIndex(item => toInt(item.id) === foodItemId);\r\n\r\n  allFoodItems.splice(index, 1);\r\n  res.status(204).json(allFoodItems);\r\n};\r\n"]}